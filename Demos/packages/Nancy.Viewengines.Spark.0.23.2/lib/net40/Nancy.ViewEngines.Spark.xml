<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nancy.ViewEngines.Spark</name>
    </assembly>
    <members>
        <member name="M:Nancy.ViewEngines.Spark.Descriptors.IDescriptorFilter.ExtraParameters(Nancy.ViewEngines.ViewLocationResult,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Called frequently to extract filter-specific parameters from a request viewLocationResult. This call
            happens on every request so should be implemented as efficiently as possible.
            </summary>
            <param name="viewLocationResult">The current request's action viewLocationResult</param>
            <param name="extra">Dictionary where additional parameters should be added</param>
        </member>
        <member name="M:Nancy.ViewEngines.Spark.Descriptors.IDescriptorFilter.PotentialLocations(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            The DefaultDescriptorBuider calls this method for the filter to return a modified enumerable
            ordered list of potential template locations. This is called only when the unique combination of action,
            master, view, and extra have not been resolved previously.
            </summary>
            <param name="locations">incoming ordered list of locations</param>
            <param name="extra">extra parameters which have been extracted</param>
            <returns>either the original list or a new, augmented, enumerable list</returns>
        </member>
        <member name="M:Nancy.ViewEngines.Spark.Descriptors.IDescriptorBuilder.GetExtraParameters(Nancy.ViewEngines.ViewLocationResult)">
            <summary>
            Implemented by custom descriptor builder to quickly extract additional parameters needed
            to locate templates, like the theme or language in effect for the request
            </summary>
            <param name="viewLocationResult">Context information for the current request</param>
            <returns>An in-order array of values which are meaningful to BuildDescriptor on the same implementation class</returns>
        </member>
        <member name="M:Nancy.ViewEngines.Spark.Descriptors.IDescriptorBuilder.BuildDescriptor(Nancy.ViewEngines.Spark.Descriptors.BuildDescriptorParams,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Given a set of MVC-specific parameters, a descriptor for the target view is created. This can
            be a bit more expensive because the existence of files is tested at various candidate locations.
            </summary>
            <param name="buildDescriptorParams">Contains all of the standard and extra parameters which contribute to a descriptor</param>
            <param name="searchedLocations">Candidate locations are added to this collection so an information-rich error may be returned</param>
            <returns>The descriptor with all of the detected view locations in order</returns>
        </member>
        <member name="M:Nancy.ViewEngines.Spark.Descriptors.DefaultDescriptorBuilder.ApplyFilters(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <remarks>Apply all of the filters PotentialLocations in order</remarks>
        </member>
        <member name="T:Nancy.ViewEngines.Spark.Descriptors.DefaultDescriptorBuilder.UseMasterGrammar">
            <summary>
            Simplified parser for &lt;use master=""/&gt; detection.
            TODO: Rob G - move somewhere else when I've had some sleep - probably to Spark.Parser in Core
            </summary>
        </member>
        <member name="T:Nancy.ViewEngines.Spark.NancyBindingProvider">
            <summary>
            Loads binding files from the application path as returned by the current <see cref="T:Nancy.IRootPathProvider"/>.
            </summary>
            <remarks>This will scan all sub-folders as well.</remarks>
        </member>
        <member name="M:Nancy.ViewEngines.Spark.NancyBindingProvider.#ctor(Nancy.IRootPathProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.Spark.NancyBindingProvider"/> class, 
            with the provided <paramref name="rootPathProvider"/>.
            </summary>
            <param name="rootPathProvider">The root path provider that defines where bindings should be looked for.</param>
        </member>
        <member name="P:Nancy.ViewEngines.Spark.NancySparkView.ViewBag">
            <summary>
            Non-model specific data for rendering in the response
            </summary>
        </member>
        <member name="P:Nancy.ViewEngines.Spark.NancySparkView.ViewData">
            <summary>
            Non-model specific data retrieved using the &lt;viewdata /&gt; tag in Spark views
            </summary>
            <remarks>See more on http://sparkviewengine.com/documentation/variables#Usingviewdata</remarks>
        </member>
        <member name="T:Nancy.ViewEngines.Spark.NancyViewData">
            <summary>
            Wraps <see cref="P:Nancy.ViewEngines.Spark.NancySparkView.ViewBag"/> so that it can be retrieved in view by using Spark's &lt;viewdata /&gt; tag
            </summary>
            <example> In route add something to ViewBag:
            <code>
            this.ViewBag["foo"] = "bar";
            </code>
            In view:
            <code>
            &lt;viewdata foo="string" /&gt;
            
            The value of foo is: ${foo}
            </code>
            </example>
        </member>
        <member name="M:Nancy.ViewEngines.Spark.NancyViewData.#ctor(Nancy.ViewEngines.Spark.NancySparkView)">
            <summary>
            Initializes a new instance of <see cref="T:Nancy.ViewEngines.Spark.NancyViewData"/>
            </summary>
            <param name="view">view, whose <see cref="P:Nancy.ViewEngines.Spark.NancySparkView.ViewBag"/> will be used to retrieve values</param>
        </member>
        <member name="M:Nancy.ViewEngines.Spark.NancyViewData.Eval(System.String)">
            <summary>
            Gets a view data value from the <see cref="P:Nancy.ViewEngines.Spark.NancySparkView.ViewBag"/>
            </summary>
            <param name="key"><see cref="P:Nancy.ViewEngines.Spark.NancySparkView.ViewBag"/> key</param>
            <returns>null if the key wasn't present in the <see cref="P:Nancy.ViewEngines.Spark.NancySparkView.ViewBag"/></returns>
            <remarks>This method is output to the generated view class when &lt;viewdata /&gt; tag is used</remarks>
        </member>
        <member name="T:Nancy.ViewEngines.Spark.NancyViewFolder">
            <summary>
            Implementation of the IViewFolder interface to have Spark use views that's been discovered by Nancy's view locator.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.Spark.NancyViewFolder.#ctor(Nancy.ViewEngines.ViewEngineStartupContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.Spark.NancyViewFolder"/> class, using the provided
            <see cref="F:Nancy.ViewEngines.Spark.NancyViewFolder.viewEngineStartupContext"/> instance.
            </summary>
            <param name="viewEngineStartupContext"></param>
        </member>
        <member name="M:Nancy.ViewEngines.Spark.NancyViewFolder.GetViewSource(System.String)">
            <summary>
            Gets the source of the requested view.
            </summary>
            <param name="path">The view to get the source for</param>
            <returns>A <see cref="T:Spark.FileSystem.IViewFile"/> instance.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.Spark.NancyViewFolder.ListViews(System.String)">
            <summary>
            Lists all view for the specified <paramref name="path"/>.
            </summary>
            <param name="path">The path to return views for.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the matched views.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.Spark.NancyViewFolder.HasView(System.String)">
            <summary>
            Gets a value that indicates wether or not the view folder contains a specific view.
            </summary>
            <param name="path">The view to check for.</param>
            <returns><see langword="true"/> if the view exists in the view folder; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Nancy.ViewEngines.Spark.SparkRenderContextWrapper">
            <summary>
            Wraps <see cref="T:Nancy.ViewEngines.IRenderContext"/> to replace tilde (~/) path resolution with Spark's native implementation. 
            </summary>
            <remarks>This allows the use of &lt;resources /&gt; configuration section. 
            Read more on http://sparkviewengine.com/documentation/configuring#Sparksettingsinconfigfile</remarks>
        </member>
        <member name="T:Nancy.ViewEngines.Spark.SparkViewEngine">
            <summary>
            View engine for rendering spark views.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.Spark.SparkViewEngine.#ctor(Nancy.IRootPathProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.Spark.SparkViewEngine"/> class.
            </summary>
        </member>
        <member name="P:Nancy.ViewEngines.Spark.SparkViewEngine.Extensions">
            <summary>
            Gets the extensions file extensions that are supported by the view engine.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing the extensions.</value>
            <remarks>The extensions should not have a leading dot in the name.</remarks>
        </member>
    </members>
</doc>
